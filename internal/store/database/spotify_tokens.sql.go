// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: spotify_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSpotifyToken = `-- name: CreateSpotifyToken :one
INSERT INTO spotify_tokens (refresh_token, created_at, updated_at, access_token, token_type, scope, expires_at, user_id)
VALUES (
  $1,
  NOW(),
  NOW(),
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING refresh_token, access_token, token_type, scope, expires_at, user_id
`

type CreateSpotifyTokenParams struct {
	RefreshToken string
	AccessToken  string
	TokenType    string
	Scope        string
	ExpiresAt    time.Time
	UserID       uuid.UUID
}

func (q *Queries) CreateSpotifyToken(ctx context.Context, arg CreateSpotifyTokenParams) (SpotifyToken, error) {
	row := q.db.QueryRowContext(ctx, createSpotifyToken,
		arg.RefreshToken,
		arg.AccessToken,
		arg.TokenType,
		arg.Scope,
		arg.ExpiresAt,
		arg.UserID,
	)
	var i SpotifyToken
	err := row.Scan(
		&i.RefreshToken,
		&i.AccessToken,
		&i.TokenType,
		&i.Scope,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const getSpotifyTokenByID = `-- name: GetSpotifyTokenByID :one
SELECT refresh_token, access_token, token_type, scope, expires_at, user_id FROM spotify_tokens
WHERE user_id = $1
`

func (q *Queries) GetSpotifyTokenByID(ctx context.Context, userID uuid.UUID) (SpotifyToken, error) {
	row := q.db.QueryRowContext(ctx, getSpotifyTokenByID, userID)
	var i SpotifyToken
	err := row.Scan(
		&i.RefreshToken,
		&i.AccessToken,
		&i.TokenType,
		&i.Scope,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const updateSpotifyRefreshToken = `-- name: UpdateSpotifyRefreshToken :exec
UPDATE spotify_tokens
SET refresh_token = $1,
    expires_at = $2,
    updated_at = NOW
WHERE user_id = $3
`

type UpdateSpotifyRefreshTokenParams struct {
	RefreshToken string
	ExpiresAt    time.Time
	UserID       uuid.UUID
}

func (q *Queries) UpdateSpotifyRefreshToken(ctx context.Context, arg UpdateSpotifyRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateSpotifyRefreshToken, arg.RefreshToken, arg.ExpiresAt, arg.UserID)
	return err
}
